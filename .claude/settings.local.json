{
  "permissions": {
    "allow": [
      "Bash(\"C:\\Users\\yeche\\.conda\\envs\\ClaudecodeDemo\\python.exe\" src/rize_client.py)",
      "Bash(\"C:\\Users\\yeche\\.conda\\envs\\ClaudecodeDemo\\python.exe\" -c \"\nimport asyncio\nimport sys\nsys.path.insert(0, ''src'')\nfrom rize_client import RizeClient\n\nasync def test_start_timer():\n    try:\n        client = RizeClient()\n        result = await client.start_session_timer(''FOCUS'')\n        print(''Result:'', result)\n    except Exception as e:\n        print(''Error:'', str(e))\n\nasyncio.run(test_start_timer())\n\")",
      "Bash(\"C:\\Users\\yeche\\.conda\\envs\\ClaudecodeDemo\\python.exe\" -c \"\nimport asyncio\nimport sys\nsys.path.insert(0, ''src'')\nfrom rize_client import RizeClient\n\nasync def test_start_timer():\n    try:\n        client = RizeClient()\n        result = await client.start_session_timer(''FOCUS'')\n        print(''Success! Result keys:'', list(result.keys()))\n        if ''data'' in result:\n            print(''Data keys:'', list(result[''data''].keys()))\n    except Exception as e:\n        error_str = str(e).replace(''\\u274c'', ''[X]'').replace(''\\u672a\\u77e5'', ''unknown'')\n        print(''Error:'', error_str)\n\nasyncio.run(test_start_timer())\n\")",
      "Bash(\"C:\\Users\\yeche\\.conda\\envs\\ClaudecodeDemo\\python.exe\" -c \"\nimport asyncio\nimport sys\nsys.path.insert(0, ''src'')\nfrom rize_client import RizeClient\n\nasync def test_start_timer():\n    try:\n        client = RizeClient()\n        result = await client.start_session_timer(''FOCUS'')\n        print(''Success!'')\n        return True\n    except Exception as e:\n        print(''Error occurred'')\n        return False\n\nsuccess = asyncio.run(test_start_timer())\nprint(''Test result:'', success)\n\")",
      "Bash(\"C:\\Users\\yeche\\.conda\\envs\\ClaudecodeDemo\\python.exe\" -c \"\nimport asyncio\nimport sys\nsys.path.insert(0, ''src'')\nfrom rize_client import RizeClient\n\nasync def test():\n    try:\n        client = RizeClient()\n        result = await client.start_session_timer()\n        print(''Success! Got result'')\n    except Exception as e:\n        print(''Error'')\n\nasyncio.run(test())\n\")",
      "Bash(\"C:\\Users\\yeche\\.conda\\envs\\ClaudecodeDemo\\python.exe\" -c \"\nimport asyncio\nimport sys\nsys.path.insert(0, ''src'')\nfrom rize_client import RizeClient\n\nasync def test():\n    try:\n        client = RizeClient()\n        result = await client.start_session_timer()\n        print(''Success!'')\n    except Exception as e:\n        print(''Still failed'')\n\nasyncio.run(test())\n\")",
      "Bash(\"C:\\Users\\yeche\\.conda\\envs\\ClaudecodeDemo\\python.exe\" -c \"\nimport asyncio\nimport sys\nsys.path.insert(0, ''src'')\nfrom rize_client import RizeClient\n\nasync def test_create_session():\n    try:\n        client = RizeClient()\n        result = await client.create_session(\n            session_type=''FOCUS'',\n            title=''测试会话'',\n            duration_minutes=90\n        )\n        print(''Success! Keys:'', list(result.keys()))\n        if ''data'' in result:\n            print(''Data keys:'', list(result.get(''data'', {}).keys()))\n        return True\n    except Exception as e:\n        # 避免编码问题，只打印英文\n        print(''Error occurred during create_session test'')\n        return False\n\nsuccess = asyncio.run(test_create_session())\nprint(''Test result:'', success)\n\")",
      "Bash(\"C:\\Users\\yeche\\.conda\\envs\\ClaudecodeDemo\\python.exe\" -c \"\nimport asyncio\nimport sys\nsys.path.insert(0, ''src'')\nfrom rize_client import RizeClient\n\nasync def test():\n    try:\n        client = RizeClient()\n        result = await client.create_session(\n            session_type=''FOCUS'',\n            title=''Test Session'',\n            duration_minutes=30\n        )\n        print(''CreateSession Success!'')\n        if ''data'' in result and ''createSession'' in result[''data'']:\n            session = result[''data''][''createSession''].get(''session'')\n            if session:\n                print(''Session ID:'', session.get(''id''))\n                print(''Session Title:'', session.get(''title''))\n        return True\n    except Exception as e:\n        print(''CreateSession failed'')\n        return False\n\nsuccess = asyncio.run(test())\nprint(''Final result:'', success)\n\")"
    ],
    "deny": []
  }
}